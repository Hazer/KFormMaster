apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "guru.stefma.bintrayrelease"
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 37
        versionName "6.4.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            useJUnitPlatform()
        }
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

tasks.withType(Javadoc).all {
    enabled = false
}

ext {
    androidxVersion = '1.0.0'
    materialVersion = '1.0.0'
    rendererRecyclerViewAdapterVersion = '2.8.0'
    tokenautocompleteVersion = '3.0.1'
    testCoreVersion = '1.2.0'
    testExtJunitVersion = '1.1.1'
    testRulesVersion = '1.2.0'
    testExpressoVersion = '3.2.0'
    kotlintestVersion = '3.3.3'
    mockkVersion = '1.9.3'
    log4jVersion = '2.12.0'
}

dependencies {
    implementation "androidx.appcompat:appcompat:$androidxVersion",
            "com.google.android.material:material:$materialVersion",
            "androidx.recyclerview:recyclerview:$androidxVersion"
    api "com.github.vivchar:RendererRecyclerViewAdapter:$rendererRecyclerViewAdapterVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Token Autocomplete
    api "com.splitwise:tokenautocomplete:$tokenautocompleteVersion@aar"

    // Picasso (Image Manipulation)
    api 'com.squareup.picasso:picasso:2.71828'

    //Inline Activity Result (To call image picker inline)
    implementation 'com.github.florent37:inline-activity-result-kotlin:1.0.1'

    // ImagePicker
    api 'com.github.dhaval2404:imagepicker:1.2'

    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintestVersion"
    androidTestImplementation "androidx.test:core:$testCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"
    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testExpressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$testExpressoVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

publish {
    version = "6.4.0"
    group = "com.thejuki"
    userOrg = 'thejuki'
    artifactId = 'k-form-master'
    desc = 'Easily build generic forms with minimal effort (A Kotlin port of FormMaster)'
    website = 'https://github.com/TheJuki/KFormMaster'
}

